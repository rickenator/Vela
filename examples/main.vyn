import vyn::fs
smuggle http::client

class Vector
  var x: Float
  var y: Float

  // 'other: Vector' is passed by value (copied).
  fn operator+(other: Vector) -> Vector
    Vector { x: self.x + other.x, y: self.y + other.y }

  // Static method, returns a new Vector instance by value.
  fn new(x: Float, y: Float) -> Vector
    Vector { x, y }


async fn fetch_data(url: String) throws NetworkError -> String
  // http::client::connect returns my<Connection>.
  const conn: my<http::client::Connection> = http::client::connect(url)

  // conn.get() takes 'view self' (their<Connection const>) and returns my<Response>.
  const resp: my<http::client::Response> = await (view conn).get("/")

  if resp.status != 200
    throw NetworkError("Failed to fetch: " + resp.status.to_string())

  // text() on my<Response> takes 'view self' (their<Response const>).
  return (view resp).text()


fn main()
  try
    var squares = [x * x for x in 0..10] // Mutable binding.

    const v1 = Vector::new(1.0, 2.0)    // Immutable binding.
    const v2 = Vector::new(3.0, 4.0)    // Immutable binding.
    const sum_vec = v1 + v2             // Immutable binding.
    
    println("Sum: x=" + sum_vec.x.to_string() + ", y=" + sum_vec.y.to_string())

    // fs::open returns my<fs::File>.
    var f: my<fs::File> = fs::open("output.txt") // Mutable binding.

    // defer f.close()
    // close() on my<fs::File> likely takes 'borrow self' or 'view self'.
    defer f.close()

    // f.write() likely takes 'borrow self' (their<fs::File>).
    (borrow f).write("Squares: " + squares.to_string())

    const data_str = await fetch_data("https://api.example.com") // Immutable binding.
    println("Fetched: " + data_str)

  catch (e: NetworkError)
    println("Network error: " + e.message)
  catch (e: IOError)
    println("IO error: " + e.message)
  finally
    println("Cleanup complete")