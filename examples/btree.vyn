// B-tree implementation in Vyn
// Generic over key (K) and value (V) types, with order M as a compile-time constant

// Assume a Comparable trait for keys
template Comparable
  fn lt(self: view Self, other: their<Self const>) -> Bool 
  fn eq(self: view Self, other: their<Self const>) -> Bool 

// B-tree template parameterized by key type K, value type V, and order M
template BTree<K: Comparable, V, M: UInt> {
  class Node {
    var keys: [K; M-1]
    var values: [V; M-1]
    var children: [my<Node>; M]
    var num_keys: UInt
    var is_leaf: Bool

    fn new(is_leaf_param: Bool) -> Node { 
      Node {
        keys = [K; M-1](), 
        values = [V; M-1](), 
        children = [my<Node>; M](), 
        num_keys = 0,
        is_leaf = is_leaf_param
      }
    }
  }

  var root: my<Node>
  var size: UInt

  fn new() -> BTree<K, V, M>
    const root_node = make_my(Node::new(true)) 
    BTree { root: root_node, size: 0 }

  fn search(self: view Self, key: K) -> Maybe<V> {
    search_node(view self.root, key)
  }

  fn search_node(node: their<Node const>, key: K) -> Maybe<V> {
    if node.num_keys == 0 {
      return None
    }
    const idx = find_key_index(node, key)
    if idx < node.num_keys && node.keys[idx].eq(view key) { 
      if node.is_leaf {
        return Some(node.values[idx])
      }
      return if node.children[idx] == nil { None } else { search_node(view node.children[idx], key) }
    }
    if node.is_leaf {
      return None
    }
    return if node.children[idx] == nil { None } else { search_node(view node.children[idx], key) }
  }

  fn insert(self: borrow Self, key: K, value: V) {
    if self.root.num_keys == M-1 {
      const new_root_node = make_my(Node::new(false))
      new_root_node.children[0] = self.root 
      self.root = new_root_node 
      split_node(borrow self.root, 0)
    }
    insert_non_full(borrow self.root, key, value)
    self.size += 1
  }

  fn insert_non_full(node: their<Node>, key: K, value: V) { 
    var idx = find_key_index(view node, key)
    if node.is_leaf {
      for i in (idx..node.num_keys).rev() {
        node.keys[i+1] = node.keys[i]
        node.values[i+1] = node.values[i]
      }
      node.keys[idx] = key
      node.values[idx] = value
      node.num_keys += 1
    } else {
      if node.children[idx] != nil && node.children[idx].num_keys == M-1 {
        split_node(node, idx)
        if key.lt(view node.keys[idx]) {
        } else { 
          idx += 1 
        }
      }
      if node.children[idx] == nil { return } 
      insert_non_full(borrow node.children[idx], key, value)
    }
  }

  fn split_node(parent: their<Node>, child_idx: UInt) {
    const full_child = borrow parent.children[child_idx]
    if full_child == nil { return } 

    const mid_key_index = (M-1) / 2
    const new_sibling = make_my(Node::new(full_child.is_leaf))

    var j = 0
    for i in (mid_key_index + 1)..(M-1) {
      new_sibling.keys[j] = full_child.keys[i]
      if full_child.is_leaf { new_sibling.values[j] = full_child.values[i] }
      j += 1
    }
    new_sibling.num_keys = j

    if !full_child.is_leaf {
      j = 0
      for i in (mid_key_index + 1)..M {
        new_sibling.children[j] = full_child.children[i]
        full_child.children[i] = nil 
        j += 1
      }
    }
    
    const median_key = full_child.keys[mid_key_index]
    const median_value = if full_child.is_leaf { Some(full_child.values[mid_key_index]) } else { None }

    full_child.num_keys = mid_key_index

    for i in (child_idx + 1 .. parent.num_keys + 1).rev() {
      parent.children[i+1] = parent.children[i]
    }
    parent.children[child_idx + 1] = new_sibling 

    for i in (child_idx .. parent.num_keys).rev() {
      parent.keys[i+1] = parent.keys[i]
      if parent.is_leaf { parent.values[i+1] = parent.values[i] } 
    }
    parent.keys[child_idx] = median_key
    if !parent.is_leaf && full_child.is_leaf && median_value != None {
        parent.values[child_idx] = median_value.unwrap(); 
    }
    parent.num_keys += 1
  }

  fn find_key_index(node: their<Node const>, key: K) -> UInt {
    var idx: UInt = 0
    while idx < node.num_keys && node.keys[idx].lt(view key) {
      idx += 1
    }
    return idx 
  }
}

// Example usage
fn main()
  var tree = BTree<Int, String, 3>::new()
  tree.insert(10, "ten")
  tree.insert(20, "twenty")
  tree.insert(5, "five")
  tree.insert(15, "fifteen")
  
  match tree.search(10)
    Some(v) => println("Found: {}", v)
    None => println("Not found")
  
  match tree.search(99) {
    Some(v) => println("Found: {}", v)
    None => println("Not found")
  }